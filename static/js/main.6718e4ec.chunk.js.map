{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","titulo","react_default","a","createElement","className","stateInicial","cita","mascota","propietario","fecha","hora","sintomas","error","NuevaCita","state","handleChange","e","_this","setState","Object","objectSpread","defineProperty","target","name","value","handleSubmit","preventDefault","_this$state$cita","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","length","map","components_Cita","key","App","datos","concat","toConsumableArray","filter","localStorage","JSON","parse","stringify","components_Header","components_NuevaCita","components_ListaCitas","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6718e4ec.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = ({ titulo }) => {\n  return (\n    <header>\n      <h1 className=\"text-center\">{titulo}</h1>\n    </header>\n  );\n};\n// Documentar codigo\nHeader.propTypes = {\n  titulo: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport uuid from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nconst stateInicial = {\n  cita: {\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\"\n  },\n  error: false\n};\n\nclass NuevaCita extends Component {\n  state = {\n    ...stateInicial\n  };\n\n  handleChange = e => {\n    // Colocar lo que el usuario escribe en el state\n    this.setState({\n      cita: {\n        ...this.state.cita,\n        [e.target.name]: e.target.value\n      }\n    });\n  };\n\n  // Cuando el usuario envie el formulario.\n  handleSubmit = e => {\n    e.preventDefault();\n\n    // extraer los valores del state\n    const { mascota, propietario, fecha, hora, sintomas } = this.state.cita;\n    // validar que todos los campos esten llenos\n\n    if (\n      mascota === \"\" ||\n      propietario === \"\" ||\n      fecha === \"\" ||\n      hora === \"\" ||\n      sintomas === \"\"\n    ) {\n      this.setState({\n        error: true\n      });\n      // Detener ejecución con true\n      return;\n    }\n\n    // generar objeto con los datos\n    const nuevaCita = { ...this.state.cita };\n    nuevaCita.id = uuid();\n\n    // agregar la cita al state\n    this.props.crearNuevaCita(nuevaCita);\n\n    // Colocar en el state el stateInicial\n    this.setState({\n      ...stateInicial\n    });\n  };\n\n  render() {\n    //extraer valor del state\n    const { error } = this.state;\n\n    return (\n      <div className=\"card mt-5 py-5\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title text-center mb-5\">\n            Llena el formulario para crear una nueva cita\n          </h2>\n\n          {error ? (\n            <div className=\"alert alert-danger mt-2 mb-5 text-center\">\n              Todos los campos son obligatorios\n            </div>\n          ) : null}\n\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Nombre Mascota\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Nombre mascota\"\n                  name=\"mascota\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.mascota}\n                />\n              </div>\n            </div>{\" \"}\n            {/* form-group */}\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Nombre Dueño\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Nombre dueño mascota\"\n                  name=\"propietario\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.propietario}\n                />\n              </div>\n            </div>{\" \"}\n            {/* form-group */}\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\n              <div className=\"col-sm-8 col-lg-4\">\n                <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  name=\"fecha\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.fecha}\n                />\n              </div>\n\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\n              <div className=\"col-sm-8 col-lg-4\">\n                <input\n                  type=\"time\"\n                  className=\"form-control\"\n                  name=\"hora\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.hora}\n                />\n              </div>\n            </div>{\" \"}\n            {/* form-group */}\n            <div className=\"form-group row\">\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\n                Sintomas\n              </label>\n              <div className=\"col-sm-8 col-lg-10\">\n                <textarea\n                  className=\"form-control\"\n                  placeholder=\"Describe los sintomas\"\n                  name=\"sintomas\"\n                  onChange={this.handleChange}\n                  value={this.state.cita.sintomas}\n                />\n              </div>\n            </div>{\" \"}\n            {/* form-group */}\n            <input\n              type=\"submit\"\n              className=\"py-3 mt-2 btn btn-success btn-block\"\n              value=\"Agregar nueva cita\"\n            />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Documentar codigo\nNuevaCita.propTypes = {\n  crearNuevaCita: PropTypes.func.isRequired\n};\n\nexport default NuevaCita;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Cita = ({ cita, eliminarCita }) => (\n  <div className=\"media mt-3\">\n    <div className=\"media-body\">\n      <h3 className=\"mt-0\">{cita.mascota}</h3>\n      <p className=\"card-text\">\n        <span>Nombre dueño: </span> {cita.propietario}{\" \"}\n      </p>\n      <p className=\"card-text\">\n        <span>Fecha: </span> {cita.fecha}{\" \"}\n      </p>\n      <p className=\"card-text\">\n        <span>Hora: </span> {cita.hora}{\" \"}\n      </p>\n      <p className=\"card-text\">\n        <span>Sintomas: </span>{\" \"}\n      </p>\n      <p className=\"card-text\">{cita.sintomas}</p>\n\n      <button className=\"btn btn-danger\" onClick={() => eliminarCita(cita.id)}>\n        Eliminar &times;\n      </button>\n    </div>\n  </div>\n);\n\n// Documentar codigo\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n};\n\nexport default Cita;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cita from \"./Cita\";\n\nconst ListaCitas = ({ citas, eliminarCita }) => (\n  <div className=\"card mt-5 py-5\">\n    <div className=\"card-body\">\n      <h2 className=\"card-title text-center\">\n        {citas.length > 0 ? \"Administra las citas aqui\" : \"No hay citas\"}\n      </h2>\n      <div className=\"lista-citas\">\n        {citas.map(cita => (\n          <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\n// Documentar codigo\nListaCitas.propTypes = {\n  citas: PropTypes.array.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n};\n\nexport default ListaCitas;\n","import React, { Component } from \"react\";\nimport \"./bootstrap.min.css\";\n\nimport Header from \"./components/Header\";\nimport NuevaCita from \"./components/NuevaCita\";\nimport ListaCitas from \"./components/ListaCitas\";\n\nclass App extends Component {\n  state = {\n    citas: []\n  };\n\n  // Cuando la aplicación carga\n  componentDidMount() {\n    if (localStorage[\"citas\"]) {\n      const citas = JSON.parse(localStorage[\"citas\"]);\n      this.setState({\n        citas\n      });\n    }\n  }\n\n  // cuando hay cambios\n  componentDidUpdate() {\n    localStorage[\"citas\"] = JSON.stringify(this.state.citas);\n  }\n\n  crearNuevaCita = datos => {\n    // Copiar state actual\n    const citas = [...this.state.citas, datos];\n    // agregar el nuevo state\n    this.setState({\n      citas\n    });\n  };\n\n  // Elimina las citas del state\n  eliminarCita = id => {\n    // tomar una copia del state\n    const citasActuales = [...this.state.citas];\n\n    //utilizar filter para sacer el elemento @id del arreglo\n    const citas = citasActuales.filter(cita => cita.id !== id);\n\n    // actualizar el state\n    this.setState({\n      citas\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header titulo=\"Pacientes veterianaria\" />\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <NuevaCita crearNuevaCita={this.crearNuevaCita} />\n          </div>\n          <div className=\"mt-5 col-md-10 mx-auto\">\n            <ListaCitas\n              citas={this.state.citas}\n              eliminarCita={this.eliminarCita}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}